// service-worker.js
const CACHE_NAME = 'dj-player-v1';
const URLS_TO_CACHE = [
  '/',
  '/index.html',
  '/manifest.json',
  '/icons/icon-192.png',
  '/icons/icon-512.png'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∂–µ—Å—Ç–∫–æ –∫—ç—à–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
self.addEventListener('install', event => {
  console.log('üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä–∞');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('üì¶ –ö—ç—à–∏—Ä—É—é —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω–∞:', URLS_TO_CACHE);
        return cache.addAll(URLS_TO_CACHE);
      })
      .then(() => {
        console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
        return self.skipWaiting();
      })
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è - —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
self.addEventListener('activate', event => {
  console.log('üî• –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä–∞');
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π –∫—ç—à:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('‚úÖ –°–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      return self.clients.claim();
    })
  );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', event => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã –∏ chrome-extension
  if (event.request.method !== 'GET' || event.request.url.startsWith('chrome-extension')) {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if (response) {
          return response;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ - —Å–µ—Ç—å + –∫—ç—à–∏—Ä—É–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ
        return fetch(event.request)
          .then(response => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            const responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then(cache => {
                cache.put(event.request, responseToCache);
              });

            return response;
          })
          .catch(error => {
            console.error('‚ùå Fetch failed:', error);
            // –î–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            if (event.request.destination === 'document') {
              return caches.match('/');
            }
          });
      })
  );
});
